
import (
	"th.um"
	"atlas.um"
)

//~~struct Anim
// Anim allows you to animate between individual frames of an atlas.
type Anim* = struct {
	// the source atlas
	atl: atlas::Atlas
	// the first cell of the animation
	min: int
	// the last cell of the animation
	max: int
	fps: real32
	// offset in time
	offset: int
}
//~~

//~~fn mk
// `Anim` constructor
fn mk*(atl: atlas::Atlas, fps: int, min: int = 0, max: int = -1 /* len(atl) - 1 */, offset: int = -1 /* th.time */): Anim {
//~~
	if !atl.i.validate() {
		th::__error("invalid atlas image")
	}

	a := Anim{}

	a.atl = atl
	a.fps = fps
	a.min = min
	if max == -1 {
		a.max = trunc(atl.dm.x * atl.dm.y) - 1
	} else {
		a.max = max
	}

	if offset == -1 {
		a.offset = th::time
	} else {
		a.offset = offset
	}

	return a
}

//~~fn Anim.animate
// Crops the base atlas to the cell that should be visible at `time`.
fn (anm: ^Anim) animate*(time: int) {
//~~
	if anm.fps == 0 || anm.max == 0 {
			return
	}

	n := (round(real(time-anm.offset)/round((1000.0/anm.fps))) % anm.max) + anm.min

	anm.atl.cropSource(anm.atl.coords(n))
}

//~~fn Anim.framesPlayed
// Returns how many frames were played at `time`.
fn (anm: ^Anim) framesPlayed*(time: int): int {
//~~
	return trunc((time - anm.offset) / 1000.0 * anm.fps)
}
