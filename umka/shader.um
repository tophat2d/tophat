
import (
	"th.um"
)

//~~opaque Shader
// Shader allows you to define your own vertex and fragment GLSL shaders. This
// is a low-level feature, so it's very easy to mess up.
//
// In tophat, instead of a main function, shaders provide th_vertex and
// th_fragment. The signature of th_vertex is:
//
// ```
// vec2 th_vertex(vec2 vert);
// ```
//
// where vert is the position of the vertex taken from the vertex buffer.
// The output is the vertex shader output.
//
// As for fragment shaders, there are two types of them. One for canvas
// and one for images. In canvas shaders, the fragment function is very simple:
//
// ```
// vec4 th_fragment(vec4 color);
// ```
//
// Image fragment function looks like this:
//
// ```
// vec4 th_fragment(sampler2D tex, vec2 coord);
// ```
//
// where tex is the texture and coord are the texture coordinates. Be aware to
// swap the output of the `texture2D` function. Example:
//
// ```
// texture2D(tex, coord).abgr
// ```
type Shader* = struct {
//~~
	handle: int
}


//~~Default shader constants
defaultImageShader* := Shader{1}
defaultCanvasShader* := Shader{2}
//~~

//~~struct Uniform
// Represents a GLSL uniform.
type Uniform* = struct {
	s: Shader
	l: uint
}
//~~

fn umth_shader_compile_canvas(vertex, fragment: str): int
//~~fn mkCanvas
// Compiles a canvas shader from source. If there is a compilation error, it
// will print something to the console.
fn mkCanvas*(vertex, fragment: str): Shader {
//~~
	return Shader{umth_shader_compile_canvas(vertex, fragment)}
}

fn umth_shader_compile_image(vertex, fragment: str): int
//~~fn mkImage
// Compiles an image shader from source. If there is a compilation error, it
// will print something to the console.
fn mkImage*(vertex, fragment: str): Shader {
//~~
	return Shader{umth_shader_compile_image(vertex, fragment)}
}

fn umth_shader_pick_canvas(handle: int)
//~~fn Shader.pickForCanvas
// Picks the shader to be used for canvas drawing. Flushes the canvas batch.
fn (s: ^Shader) pickForCanvas*() {
//~~
	umth_shader_pick_canvas(s.handle)
}

fn umth_shader_pick_image(handle: int)
//~~fn Shader.pickForImage
// Picks the shader to be used for image drawing. Flushes the image batch.
fn (s: ^Shader) pickForImage*() {
//~~
	umth_shader_pick_image(s.handle)
}

fn umth_shader_get_uniform_location(handle: int, name: str): uint
//~~fn Shader.getUniformLocation
// Retunrs a uniform by name.
fn (s: ^Shader) getUniformLocation*(name: str): Uniform {
//~~
	return Uniform{s^, umth_shader_get_uniform_location(s.handle, name)}
}

fn umth_shader_set_uniform_int(shandle, uhandle: uint, value: int)
//~~fn Uniform.setInt
// Sets a uniform to an int value. Flushes both batches.
fn (u: ^Uniform) setInt*(value: int) {
//~~
	umth_shader_set_uniform_int(u.s.handle, u.l, value)
}

fn umth_shader_set_uniform_vf2(shandle, uhandle: uint, value: th::Vf2)
//~~fn Uniform.setVf2
// Sets a uniform to a vf2. Flushes both batches.
fn (u: ^Uniform) setVf2*(value: th::Vf2) {
//~~
	umth_shader_set_uniform_vf2(u.s.handle, u.l, value)
}
