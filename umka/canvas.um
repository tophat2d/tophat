//~~
// Canvas library allowing for drawing basic shapes. Coordinates are based on
// the screen.
//~~

import (
	"misc.um"
	"rect.um"
	"th.um"
)

fn umth_canvas_draw_text(text: str, pos: th::Vf2, color: uint32, size: th::fu)
//~~fn drawText
// Draws a basic pixel text. Only ascii is supported.
fn drawText*(text: str, pos: th::Vf2, color: uint32, size: th::fu) {
//~~
	umth_canvas_draw_text(text, pos, color, size)
}

//~~fn textSize
// Returns the size of text taken by an equivalent drawText call.
fn textSize*(text: str, scale: th::fu): th::Vf2 {
//~~
	var w, maxw, h: int
	w = 0
	maxw = 0
	h = 1

	for i in text {
		if text[i] == "\n" {
			h += 1
			if w > maxw {
				maxw = w
			}
			w = 0

			continue
		}

		w++
	}

	if w > maxw {
		maxw = w
	}

	return {maxw * scale * 6 - scale, h * 6 * scale}
}

type PixelFont = struct { }

fn (p: ^PixelFont) draw*(text: str, pos: th::Vf2, color: uint32, scale: th::fu = 1.0) {
	drawText(text, pos, color, scale)
}

fn (p: ^PixelFont) measure*(text: str): th::Vf2 {
	return textSize(text, 1)
}

fn (p: ^PixelFont) validate*(): bool {
	return true
}

//~~Pixel Font
// The `pixelFont` variable exposes the canvas pixel font as a generic font.
var pixelFont*: PixelFont
//~~

fn umth_canvas_draw_rect(color: uint32, r: rect::Rect)
//~~fn drawRect
// Draws a Rectangle.
fn drawRect*(color: uint32, r: rect::Rect) {
//~~
	umth_canvas_draw_rect(color, r)
}

fn umth_canvas_draw_line(color: uint32, b, e: th::Vf2, thickness: th::fu)
//~~fn drawLine
// Draws a line.
fn drawLine*(color: uint32, b, e: th::Vf2, thickness: th::fu) {
//~~
	umth_canvas_draw_line(color, b, e, thickness)
}

fn umth_canvas_draw_rect_lines(color: uint32, r: rect::Rect, thickness: real32)
//~~fn drawRectLines
// Draws rect border.
fn drawRectLines*(color: uint32, r: rect::Rect, thickness: real32 = 1.0) {
//~~
	umth_canvas_draw_rect_lines(color, r, thickness)
}

fn umth_canvas_draw_quad(color: uint32, q: th::Quad)
//~~fn drawQuad
// Draws a convex quad.
fn drawQuad*(color: uint32, q: th::Quad) {
//~~
	umth_canvas_draw_quad(color, q)
}

fn umth_canvas_draw_trig(color: uint32, a, b, c: th::Vf2)
//~~fn drawTrig
// Draws a triangle.
fn drawTrig*(color: uint32, a, b, c: th::Vf2) {
//~~
	umth_canvas_draw_trig(color, a, b, c)
}

var scissor: []rect::Rect

fn umth_canvas_begin_scissor_rect(r: rect::Rect)
fn umth_canvas_end_scissor()

fn rectDiff(a, b: rect::Rect): rect::Rect {
	x := misc::maxf(a.x, b.x);
	y := misc::maxf(a.y, b.y);
	return rect::Rect{
		x,y,
		misc::minf(a.x + a.w, b.x + b.w) - x,
		misc::minf(a.y + a.h, b.y + b.h) - y};
}

//~~fn beginScissorRect
// Disable rendering outside of rect `r`
fn beginScissorRect*(r: rect::Rect, debug: bool = false) {
//~~
	r2 := r
	if len(scissor) == 0 {
		scissor = { r }
	} else {
		s := scissor[len(scissor) - 1]
		r2 = rectDiff(s, r)
		scissor = append(scissor, r2)
	}

	if debug {
		drawRectLines(th::red, r2, 0.1)
	}

	umth_canvas_begin_scissor_rect(r2)
}

//~~fn endScissor
// Stops cropping
fn endScissor*() {
//~~
	if len(scissor) > 0 {
		scissor = delete(scissor, len(scissor) - 1)
		if len(scissor) > 0 {
			last := scissor[len(scissor)-1]
			umth_canvas_begin_scissor_rect(last)
		} else {
			umth_canvas_end_scissor();
		}
	}
}
