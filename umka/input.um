//~~
// Module for getting keyboard and mouse input.
// is* functions return info based on a us QWERTY layout. They are supposed to
// be used for game controls. For text input use getStr.
//~~

import (
	"th.um"
	"window.um"
)

//~~Keycode constants
type Key* = enum {
	mouse1         = 1   // NOTE: mouse 2 and 3 key codes are swapped
	mouse2         = 3   //       because sokol uses 3 for middle mouse
	mouse3         = 2   //       button.

	ctrl           = 16
	shift          = 17
	alt            = 18

	space          = 32
	apostrophe     = 39  /* ' */
	comma          = 44  /* , */
	minus          = 45  /* - */
	dot            = 46  /* . */
	slash          = 47  /* / */
	num0           = 48
	num1           = 49
	num2           = 50
	num3           = 51
	num4           = 52
	num5           = 53
	num6           = 54
	num7           = 55
	num8           = 56
	num9           = 57
	semicolon      = 59  /* ; */
	equal          = 61  /* = */
	a              = 65
	b              = 66
	c              = 67
	d              = 68
	e              = 69
	f              = 70
	g              = 71
	h              = 72
	i              = 73
	j              = 74
	k              = 75
	l              = 76
	m              = 77
	n              = 78
	o              = 79
	p              = 80
	q              = 81
	r              = 82
	s              = 83
	t              = 84
	u              = 85
	v              = 86
	w              = 87
	x              = 88
	y              = 89
	z              = 90
	leftBracket    = 91  /* [ */
	backslash      = 92  /* \ */
	rightBracket   = 93  /* ] */
	graveAccent    = 96  /* ` */
	world1         = 161 /* non-US #1 */
	world2         = 162 /* non-US #2 */
	escape         = 256
	enter          = 257
	tab            = 258
	backspace      = 259
	insert         = 260
	delete         = 261
	right          = 262
	left           = 263
	down           = 264
	up             = 265
	pageUp         = 266
	pageDown       = 267
	home           = 268
	end            = 269
	capsLock       = 280
	scrollLock     = 281
	numLock        = 282
	printScreen    = 283
	pause          = 284
	fn0            = 289
	fn1            = 290
	fn2            = 291
	fn3            = 292
	fn4            = 293
	fn5            = 294
	fn6            = 295
	fn7            = 296
	fn8            = 297
	fn9            = 298
	fn10           = 299
	fn11           = 300
	fn12           = 301
	fn13           = 302
	fn14           = 303
	fn15           = 304
	fn16           = 305
	fn17           = 306
	fn18           = 307
	fn19           = 308
	fn20           = 309
	fn21           = 310
	fn22           = 311
	fn23           = 312
	fn24           = 313
	fn25           = 314
	kp0            = 320
	kp1            = 321
	kp2            = 322
	kp3            = 323
	kp4            = 324
	kp5            = 325
	kp6            = 326
	kp7            = 327
	kp8            = 328
	kp9            = 329
	kpDecimal      = 330
	kpDivide       = 331
	kpMultiply     = 332
	kpSubtract     = 333
	kpAdd          = 334
	kpEnter        = 335
	kpEqual        = 336
	leftShift      = 340
	leftControl    = 341
	leftAlt        = 342
	leftSuper      = 343
	rightShift     = 344
	rightControl   = 345
	rightAlt       = 346
	rightSuper     = 347
	menu           = 348
}
//~~

//~~Gamepad button number
type GamepadButton* = enum {
	a
	b
	x
	y
	lt
	rt
	lb
	rb
	select
	start
	up
	down
	left
	right
	lstick
	rstick
	_count
}
//~~

//~~Gamepad stick number
type GamepadStick* = enum {
	left
	right
}
//~~

type Gamepad* = struct {
	id: int
}

fn toupper(c: char): int {
	if c >= 'a' && c <= 'z' {
		return int(c) - 32;
	}
	return int(c);
}

fn umth_input_get_mouse(): th::Vf2
//~~fn getMousePos
// Returns the position of mouse cursor in relation to the screen.
fn getMousePos*(): th::Vf2 {
//~~
	return umth_input_get_mouse()
}

//~~fn getGlobalMousePos
// Returns the position of mouse cursor in relation to cam.
fn getGlobalMousePos*(): th::Vf2 {
//~~
	return getMousePos().add(window::getViewportOffset())
}

fn umth_input_is_pressed(key: Key): bool
//~~fn isPressed
// Returns true if key is pressed. Either use codes defined in the file above,
// or pass lower case char/number.
fn isPressed*(code: Key): bool {
//~~
	return umth_input_is_pressed(code)
}

//~~fn isPressedc
// Like `isPressed`, but you can pass char as the code.
fn isPressedc*(code: char): bool {
//~~
	return isPressed(Key(toupper(code)))
}

fn umth_input_is_just_pressed(key: Key): bool
//~~fn isJustPressed
// Returns, whether code was just pressed this loop.
fn isJustPressed*(code: Key): bool {
//~~
	return umth_input_is_just_pressed(code)
}

//~~fn isJustPressedc
// Like `isJustPressed`, but you can pass char as the code.
fn isJustPressedc*(code: char): bool {
//~~
	return isJustPressed(Key(toupper(code)))
}

fn umth_input_is_pressed_repeat(key: Key): bool
//~~fn isPressedRepeat
// Returns, whether code was just pressed this loop, with key repeat.
fn isPressedRepeat*(code: Key): bool {
//~~
	return umth_input_is_pressed_repeat(code)
}

//~~fn isPressedRepeatc
// Like `isPressedRepeat`, but you can pass char as the code.
fn isPressedRepeatc*(code: char): bool {
//~~
	return isPressedRepeat(Key(toupper(code)))
}

fn umth_input_is_just_released(key: Key): bool
//~~fn isJustReleased
// Returns true if a key was just released.
fn isJustReleased*(code: Key): bool {
//~~
	return umth_input_is_just_released(code)
}

//~~fn isJustReleasedc
// Like `isJustReleased`, but you can pass char as the code.
fn isJustReleasedc*(code: char): bool {
//~~
	return isJustReleased(Key(toupper(code)))
}

fn umth_input_clear*(code: Key)
//~~fn clear
// Clears both the pressed and justPressed state of a code.
fn clear*(code: Key) {
//~~
	umth_input_clear(code)
}

//~~fn clearc
// Like `clear`, but you can pass char as the code.
fn clearc*(code: char) {
//~~
	umth_input_clear(Key(toupper(code)))
}

fn umth_input_get_str(): str
//~~fn getStr
// Returns a string entered by the user in the last cycle.
fn getStr*(): str {
//~~
	return umth_input_get_str()
}

fn umth_input_get_mouse_delta(): th::Vf2
//~~fn getMouseDelta
// Returns the difference between mouse positions in the last cycle. Will work
// even if `window.freezeCursor` is enabled.
fn getMouseDelta*(): th::Vf2 {
//~~
	return umth_input_get_mouse_delta()
}

fn umth_input_get_mouse_scroll(): th::Vf2
//~~fn getMouseScroll
// Returns the scroll wheel value
fn getMouseScroll*(): th::Vf2 {
//~~
	return umth_input_get_mouse_scroll()
}

fn umth_input_gamepad_get_gamepads*(): [4]int

//~~fn gamepads
// Returns a list of gamepads that are currently connected.
fn gamepads*(): []Gamepad {
//~~
	gamepads := umth_input_gamepad_get_gamepads()

	result := []Gamepad{}

	for i, p in gamepads {
		if p >= 0 {
			result = append(result, Gamepad{p})
		}
	}

	return result
}

fn umth_input_gamepad_get_gamepad*(): int

//~~fn gamepad
// Returns the connected gamepad.
fn gamepad*(): Gamepad {
//~~
	return Gamepad{umth_input_gamepad_get_gamepad()}
}

fn umth_input_gamepad_is_pressed(gamepad: int, button: GamepadButton): bool

//~~fn isPressed
// Returns true if the gamepad button is pressed.
fn (g: ^Gamepad) isPressed*(button: GamepadButton): bool {
//~~
	return umth_input_gamepad_is_pressed(g.id, button)
}

fn umth_input_gamepad_is_just_pressed(gamepad: int, button: GamepadButton): bool

//~~fn isJustPressed
// Returns true if the gamepad button was just pressed.
fn (g: ^Gamepad) isJustPressed*(button: GamepadButton): bool {
//~~
	return umth_input_gamepad_is_just_pressed(g.id, button)
}

fn umth_input_gamepad_is_just_released(gamepad: int, button: GamepadButton): bool

//~~fn isJustReleased
// Returns true if the gamepad button was just released.
fn (g: ^Gamepad) isJustReleased*(button: GamepadButton): bool {
//~~
	return umth_input_gamepad_is_just_released(g.id, button)
}

fn umth_input_gamepad_pressure(gamepad: int, button: GamepadButton): th::fu

//~~fn pressure
// Returns the pressure of the gamepad button in the range [0, 1].
fn (g: ^Gamepad) pressure*(button: GamepadButton): th::fu {
//~~
	return umth_input_gamepad_pressure(g.id, button)
}

fn umth_input_gamepad_stick(gamepad: int, stick: GamepadStick): th::Vf2

//~~fn stick
// Returns the movement of the gamepad stick in the range [-1, 1] for each axis.
fn (g: ^Gamepad) stick*(stick: GamepadStick): th::Vf2 {
//~~
	return umth_input_gamepad_stick(g.id, stick)
}

fn umth_input_gamepad_rumble(gamepad: int, left, right: th::fu)

//~~fn rumble
// Rumbles/vibrates the gamepad.
fn (g: ^Gamepad) rumble*(left, right: th::fu) {
//~~
	umth_input_gamepad_rumble(g.id, left, right)
}
