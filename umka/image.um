import (
	"rect.um"
	"std.um"
	"th.um"
)

//~~enum Filter
// Filtering mode for images, render targets, and fonts.
type Filter* = enum {
	nearest = 0
	linear  = 1
}
//~~

//~~opaque Image
// Represents a drawable image. It is an opaque structure.
// Images support a color filter. It is applied by multiplying the color
// of each pixel with the filter.
type Image* = struct{ _: ^struct{} }
//~~

fn umth_image_load(ret: ^Image, path: str): th::ErrCode
//~~fn load
// Loads an image at path.
fn load*(path: str): (Image, std::Err) {
//~~
	img := Image{}
	ec := umth_image_load(&img, path)
	return img, th::__errFromCode(ec)
}

//~~fn Image.validate
// Returns true, if i's handle points to an image.
fn (i: ^Image) validate*(): bool {
//~~
	return i._ != null
}

fn umth_image_flipv(i: Image, f: bool)
//~~fn Image.flipv
// Flips image on it's vertical axis.
fn (i: ^Image) flipv*(flip: bool) {
//~~
	if !i.validate() {
		th::__error("image is invalid")
	}

	umth_image_flipv(i^, flip)
}

fn umth_image_fliph(i: Image, f: bool)
//~~fn Image.fliph
// Flips image on it's horizontal axis.
fn (i: ^Image) fliph*(flip: bool) {
//~~
	if !i.validate() {
		th::__error("image is invalid")
	}

	umth_image_fliph(i^, flip)
}

fn umth_image_draw(img: Image, t: th::Transform, color: uint32)
//~~fn Image.draw
// Draws the image in screen coordinates. It transforms it with t and
// applies color as a color filter.
fn (i: ^Image) draw*(t: th::Transform, color: uint32 = th::white) {
//~~
	if !i.validate() {
		th::__error("image is invalid")
	}

	umth_image_draw(i^, t, color)
}

fn umth_image_blit(img: Image, src, dest: rect::Rect, color: uint32, rot: th::fu, origin: th::Vf2)
//~~fn Image.blit
// Copies source rectangle (texture coordinates) to destination rectangle (screen coordinates).
fn (i: ^Image) blit*(src, dest: rect::Rect, color: uint32 = 0xFFFFFFFF, rot: th::fu = 0, origin: th::Vf2 = {0, 0}) {
//~~
	umth_image_blit(i^, src, dest, color, rot, origin)
}

fn umth_image_draw_nine_patch(img: Image, outer, inner, dest: rect::Rect,
	color: uint32, scale: real)
//~~fn Image.drawNinepatch
// Draws "nine-patch" image.
// `outer` specifies the texture coordinates of the outer rect of source image,
// `inner` specifies coordinates of inner rect of source image, positioned relative to `outer`.
// You can tint with `color`.
//
// ![](img/ninepatch.png)
fn (i: ^Image) drawNinepatch*(outer, inner, dest: rect::Rect, color: uint32 = th::white, scale: real = 1.0) {
//~~
	if !i.validate() {
		th::__error("image is invalid")
	}

	umth_image_draw_nine_patch(i^, outer, inner, dest, color, scale)
}

fn umth_image_draw_on_quad(img: Image, color: uint32, q: th::Quad)
//~~fn Image.drawOnQuad
// Draws the image on top of a quad with corners of the image positioned
// on the verticies of the quad.
fn (i: ^Image) drawOnQuad*(q: th::Quad, color: uint32 = th::white) {
//~~
	if !i.validate() {
		th::__error("image is invalid")
	}

	umth_image_draw_on_quad(i^, color, q)
}

fn umth_image_get_dims(i: Image): th::Vf2
//~~fn Image.getDims
// Returns width and heigth.
fn (i: ^Image) getDims*(): th::Vf2 {
//~~
	if !i.validate() {
		th::__error("image is invalid")
	}

	return umth_image_get_dims(i^)
}

fn umth_image_crop(img: Image, tl, br: th::Vf2)
//~~fn Image.crop
// Crops an image. Coordinates are between 0, 0 (top left) and
// 1, 1 (bottom right)
fn (i: ^Image) crop*(tl, br: th::Vf2) {
//~~
	if !i.validate() {
		th::__error("image is invalid")
	}

	umth_image_crop(i^, tl, br)
}

//~~fn Image.cropPx
// Same as `Image.crop`, but the positions are in pixels.
fn (i: ^Image) cropPx*(tr, br: th::Vf2) {
//~~
	if !i.validate() {
		th::__error("image is invalid")
	}

	dm := i.getDims()
	umth_image_crop(i^, tr.div(dm), br.div(dm))
}

//~~fn Image.cropRect
// Same as `Image.crop`, but uses a rect instead of two positions.
fn (i: ^Image) cropRect*(r: rect::Rect) {
//~~
	if !i.validate() {
		th::__error("image is invalid")
	}

	dm := i.getDims()
	umth_image_crop(i^, r.getPos().div(dm), r.getEnd().div(dm))
}

fn umth_image_crop_quad(img: Image, q: th::Quad)
//~~fn Image.cropQuad
// Crop an image using a quad.
fn (i: ^Image) cropQuad*(q: th::Quad) {
//~~
	if !i.validate() {
		th::__error("image is invalid")
	}

	umth_image_crop_quad(i^, q)
}

fn umth_image_get_crop_quad(img: Image): th::Quad
//~~fn Image.getCropQuad
// Crop an image using a quad.
fn (i: ^Image) getCropQuad*(): th::Quad {
//~~
	if !i.validate() {
		th::__error("image is invalid")
	}

	return umth_image_get_crop_quad(i^)
}

fn umth_image_from_data(ret: ^Image, data: ^uint32, dm: th::Vf2): th::ErrCode
//~~fn mk
// Creates an image from raw data.
fn mk*(data: []uint32, dm: th::Vf2): (Image, std::Err) {
//~~
	img := Image{}
	ec := umth_image_from_data(&img, &data[0], dm)

	return img, th::__errFromCode(ec)
}

fn umth_image_copy(ret: ^Image, data: Image): th::ErrCode
//~~fn Image.copy
// Copies image into a new one.
fn (i: ^Image) copy*(): (Image, std::Err) {
//~~
	if !i.validate() {
		th::__error("image is invalid")
	}

	img := Image{}
	ec := umth_image_copy(&img, i^)

	return img, th::__errFromCode(ec)
}

fn umth_image_set_filter(data: Image, filter: Filter): th::ErrCode
//~~fn Image.setfilter
// Sets a mag/min filter. 0 is nearest, others are linear.
// This function will regenerate the texture. This means it shouldn't be
// used in a loop.
// https://learnopengl.com/img/getting-started/texture_filtering.png
// left is nearest, right is linear.
fn (i: ^Image) setfilter*(filter: Filter): std::Err {
//~~
	if !i.validate() {
		th::__error("image is invalid")
	}

	return th::__errFromCode(umth_image_set_filter(i^, filter))
}

fn umth_image_update_data(img: Image, data: ^uint32, dm: th::Vf2): th::ErrCode
//~~fn Image.setData
// Updates the image data. dm are the dimensions of the new image.
// The new image doesn't have to be the same size as the old one.
fn (i: ^Image) setData*(data: []uint32, dm: th::Vf2): std::Err {
//~~
	if !i.validate() {
		th::__error("image is invalid")
		return {}
	}

	if dm.x * dm.y != len(data) {
		return th::__errFromCode(.bad_input, "incorrect dimensions")
	}

	return th::__errFromCode(umth_image_update_data(i^, &data[0], dm))
}

fn umth_image_get_data(img: Image, data: ^uint32)
//~~fn Image.getData
// Gets the image data. This downloads the data from the GPU on **each call**.
// Don't use in performance critical sections.
fn (i: ^Image) getData*(): []uint32 {
//~~
	if !i.validate() {
		th::__error("image is invalid")
	}

	buf := make([]uint32, trunc(i.getDims().x * i.getDims().y))
	if len(buf) == 0 {
		return buf
	}

	umth_image_get_data(i^, &buf[0])

	return buf
}
