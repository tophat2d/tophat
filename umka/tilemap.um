//~~
// Tilemaps allow for easy level construction and fast collisions. You can even
// use them for some games instead of entities (tetris comes to mind)
//~~

import (
	"th.um"
	"ent.um"
	"atlas.um"
)

//~~Direction constants used for autotile
const (
	top* = 1
	right* = 2
	bot* = 4
	left* = 8
)
//~~

//~~struct Tilemap
// Tilemap struct
type Tilemap* = struct {
	atlas: atlas::Atlas
	pos: th::Vf2
	w: th::uu // width of tilemap
	cells: []th::uu // all cells (this will draw the tile in tiles with number in cells - 1)
	collMask: []bool // if true, the tile collides
	scale: th::fu
}
//~~

//~~fn mk
fn mk*(cells: []th::uu, w: th::uu, at: atlas::Atlas, scale: th::fu = 1): Tilemap {
//~~
	if !at.i.validate() {
		th::__error("invalid atlas")
	}

	t := Tilemap{}
	t.cells = cells
	t.w = w
	t.atlas = at
	t.collMask = make([]bool, 10) //  TODO
	t.scale = scale

	return t
}

//~~fn Tilemap.edit
// Sets tile at [x, y] to tile.
fn (t: ^Tilemap) edit*(x, y, tile: int) {
//~~
	t.cells[y*t.w + x] = tile
}

fn umth_tilemap_draw(ct: ^Tilemap, tr: th::Transform)
//~~fn Tilemap.draw
// Draws the tilemap.
fn (t: ^Tilemap) draw*(tr: th::Transform) {
//~~
	if len(t.cells) == 0 { return }

	umth_tilemap_draw(t, tr)
}

fn umth_tilemap_getcoll(pos: ^th::Vf2, vert: ^th::Vf2, t: ^Tilemap, e: ^ent::Ent): int32
//~~fn Tilemap.getColl
// Checks whether `e` collides with any of the tiles in `t`, which are in the
// collmask.
//
// * `ic`[out] - the position where a collision occured
// * `pos`[out] - coordinates of a tile where a collision occured
//
// Note: While there may be multiple collisions with a tilemap, this function
// will only return one.
fn (t: ^Tilemap) getColl*(e: ent::Ent, ic: ^th::Vf2, pos: ^th::Vf2): bool {
//~~
	if len(t.cells) == 0 { return false }

	_ := th::Vf2{}
	if ic == null { ic = &_ }
	if pos == null { pos = &_ }

	c := umth_tilemap_getcoll(pos, ic, t, &e)

	return bool(c)
}

fn umth_tilemap_getcoll_line(b, e: th::Vf2, t: ^Tilemap, ic: ^th::Vf2): bool
//~~fn Tilemap.getCollLine
// Check for a collision between a tilemap and a line. `ic` will be a point of
// an intersection, if there is one.
fn (t: ^Tilemap) getCollLine*(b, e: th::Vf2, ic: ^th::Vf2): bool {
//~~
	return umth_tilemap_getcoll_line(b, e, t, ic)
}

fn umth_tilemap_autotile(tgt: ^th::uu, w, h: th::uu, src, cfg: ^th::uu, tile: th::uu)
//~~fn Tilemap.autotile
// Autotile turns all `tile` tiles in `src` into tiles in `tileCfg`, so they
// follow up correctly. `tileCfg` is an array of 16 tiles. They are placed in
// a way where OR of all the places where the tile continues (top, right bot,
// right). The constants for them are defined in this file. Example:
// tileCfg[top | bot] = 21
// top | bot would look something like this: |
fn (t: ^Tilemap) autotile*(src, tileCfg: []th::uu, tile: th::uu) {
//~~
	if len(tileCfg) < 16 {
		th::__error("autotile: tileCfg len isn't 16")
	}

	umth_tilemap_autotile(&t.cells[0], t.w, len(t.cells)/t.w, &src[0], &tileCfg[0], tile)
}
