
import (
	"th.um"
	"std.um"
	"image.um"
	"rect.um"
)

//~~struct Atlas
// Atlas is an image containing tiles in a square grid.
type Atlas* = struct {
	i: image::Image // source image
	cs: th::Vf2 // size of a cell in pixels
	dm: th::Vf2 // amount of cells in image
}
//~~

//~~fn mk
// i: source image
// dm: amount of cells
fn mk*(i: image::Image, dm: th::Vf2): Atlas {
//~~
	if !i.validate() {
		th::__error("Image is not valid")
	}

	a := Atlas{}

	a.i = i
	a.dm = dm
	a.cs = i.getDims().div(dm)

	return a
}

//~~fn mk2
// i: source image
// cs: size of a cell in pixels
fn mk2*(i: image::Image, cs: th::Vf2): Atlas {
//~~
	if !i.validate() {
		th::__error("Image is not valid")
	}

	a := Atlas{}

	a.i = i
	a.cs = cs
	a.dm = i.getDims().div(cs)

	return a
}

//~~fn Atlas.coords
// returns the coordinates of the nth tile
fn (a: ^Atlas) coords*(n: int): th::Vf2 {
//~~
	n--
	return th::Vf2{ n % trunc(a.dm.x), (n - n % trunc(a.dm.x)) / a.dm.x }
}

//~~fn Atlas.rect
// returns the rectangle of the nth tile
fn (a: ^Atlas) rect*(n: int): rect::Rect {
//~~
	n--
	return {(n % trunc(a.dm.x))*a.cs.x, ((n - n % trunc(a.dm.x)) / a.dm.x)*a.cs.y, a.cs.x, a.cs.y}
}

//~~fn Atlas.index
// returns the index of the tile at the given coordinates
fn (a: ^Atlas) index*(at: th::Vf2): int {
//~~
	return int(trunc(at.x) + trunc(at.y) * trunc(a.dm.x)) - 1
}

//~~fn Atlas.has
// returns true if the tile at the given coordinates exists
fn (a: ^Atlas) has*(at: th::Vf2): bool {
//~~
	return at.x >= 0 && at.y >= 0 && at.x < a.dm.x && at.y < a.dm.y
}

//~~fn Atlas.hasIndex
// returns true if the tile at the given index exists
fn (a: ^Atlas) hasIndex*(n: int): bool {
//~~
	return n > 0 && n <= trunc(a.dm.x * a.dm.y)
}

//~~fn Atlas.cropSource
// Crops the sourse image to only show a wanted tile
fn (a: ^Atlas) cropSource*(at: th::Vf2) {
//~~
	a.i.crop(
		{at.x / a.dm.x, at.y / a.dm.y},
		{(at.x+1) / a.dm.x, (at.y+1) / a.dm.y}
	)
}

//~~enum PackStrategy
type PackStrategy = enum {
	square
	row
	column
}
//~~

fn umth_atlas_pack(a: ^Atlas, images: ^[]image::Image, strategy: PackStrategy): th::ErrCode

//~~fn pack
// Packs an array of images into an atlas
fn pack*(images: []image::Image, strategy: PackStrategy): (Atlas, std::Err) {
//~~
	var a: Atlas
	ec := umth_atlas_pack(&a, &images, strategy)
	return a, th::__errFromCode(ec)
}

//~~fn Atlas.draw
// Draws the tile at `at`
fn (a: ^Atlas) draw*(at: th::Vf2, t: th::Transform) {
//~~
	a.cropSource(at)
	a.i.draw(t, th::white)
	a.i.crop({}, {1, 1})
}
