//~~
// `ui.um` offers an immediate GUI library suitable both for simple game menus
// and more complex applications.
//~~

import (
	"canvas.um"
	"coll.um"
	"image.um"
	"input.um"
	"placeholders.um"
	"rect.um"
	"th.um"
	"utf8.um"
	"window.um"
)

//~~struct BoxStyle
// `BoxStyle` describes how a box within the GUI is styled.  In this case box
// can be anything, ranging from a button to a container.  By default the box
// is drawn using the `image.Image.drawNinepatch` method.  However if the image
// is invalid, a rectangle with color `color` is drawn.
type BoxStyle* = struct {
	img: image::Image
	outer, inner: rect::Rect
	scale: th::fu
	color: uint32
}
//~~

//~~interface Font
// This interface is used by all elements that draw text. A `font.Font`
// implements this interface.
type Font* = interface {
	draw(text: str, pos: th::Vf2, color: uint32, scale: th::fu = 1.0)
	measure(test: str): th::Vf2
}
//~~

//~~struct PixelFont
// This struct implement the `Font` interface using the `canvas.um` pixel font.
type PixelFont* = struct { }
//~~

fn (this: ^PixelFont) draw*(t: str, p: th::Vf2, c: uint32, s: th::fu = 1.0) {
	canvas::drawText(t, p, c, s)
}

fn (this: ^PixelFont) measure*(t: str): th::Vf2 {
	return canvas::textSize(t, 1)
}

//~~struct Style
// `Style` is used as a global state for styling the GUI.
type Style* = struct {
	// current font
	ft: Font
	// font scale
	ftScale: th::fu
	// text color
	ftColor: uint32

	// Positive box - i. e. unpressed button
	posBox: BoxStyle
	// Negative box - i. e. pressed button, text box
	negBox: BoxStyle
	// Used to draw containers
	containerBox: BoxStyle
}
//~~

//~~interface Container
// Containers are used to layout elements or other containers.
type Container* = interface {
	// This adds a rectangle to the container, and returns the rectangle
	// which was actually added (the container can modify the rectangle).
	// See individual containers for further documentation.
	pushRect(r: rect::Rect): rect::Rect
	getDims(): rect::Rect
}
//~~

//~~struct Gui
// This is the main struct of any UI.  Styles and containers are in a stack.
type Gui* = struct {
	// user context passed to layout functions
	ctx: any

	// the index of the current selection. TODO implement properly
	selection: int
	// true, if the layout is being evaluated, not drawn
	isEval: bool
	// contains more unexported fields
//~~
	idx: int

	m1Pressed: bool
	m2Pressed: bool
	m3Pressed: bool

	style: []Style
	container: []Container
}

//~~fn mk
// Creates a new gui spanning `r`, with style `s`.
fn mk*(r: rect::Rect, s: Style): Gui
//~~

//~~type LayoutFn
// The layout function calls different element or container methods to create
// the user interface itself.  It is called in the `eval` and `draw`.
type LayoutFn* = fn(gui: ^Gui)
//~~

//~~fn BoxStyle.draw
// Draws a rectangle using a BoxStyle
fn (this: ^BoxStyle) draw*(r: rect::Rect) {
//~~
	if !this.img.validate() {
		canvas::drawRect(this.color, r)
		return
	}

	this.img.drawNinepatch(this.outer, this.inner, r, this.color,
		this.scale)
}

//~~fn Gui.pushStyle
// Pushes a style onto the style stack.
fn (this: ^Gui) pushStyle*(s: Style) {
//~~
	this.style = append(this.style, s)
}

//~~fn Gui.popStyle
// Pops a style from the style stack.
fn (this: ^Gui) popStyle*() {
//~~
	if len(this.style) > 1 {
		this.style = slice(this.style, 0, len(this.style) - 1)
	}
}

//~~fn Gui.getStyle
// Returns a pointer to the style atop the style stack.
fn (this: ^Gui) getStyle*(): ^Style {
//~~
	return &this.style[len(this.style) - 1]
}

//~~fn Gui.getContainer
// Returns the container atop the container stack.
fn (this: ^Gui) getContainer*(): Container {
//~~
	return this.container[len(this.container) - 1]
}

//~~fn Gui.pushRect
// Shortcut to `this.getContainer().pushRect(r)`
fn (this: ^Gui) pushRect*(r: rect::Rect): rect::Rect {
//~~
	return this.getContainer().pushRect(r)
}

//~~fn Gui.getDims
// Shortcut to `this.getContainer().getDims(r)`
fn (this: ^Gui) getDims*(): rect::Rect {
//~~
	return this.getContainer().getDims()
}

//~~fn Gui.dupStyle
// Duplicates the current style.
fn (this: ^Gui) dupStyle*() {
//~~
	this.pushStyle(this.getStyle()^)
}

//~~fn Gui.pushContainer
// Pushes a container onto the container stack.
fn (this: ^Gui) pushContainer*(c: Container) {
//~~
	this.container = append(this.container, c)
}

//~~fn Gui.popContainer
// Pops a container from the container stack.
fn (this: ^Gui) popContainer*() {
//~~
	if len(this.container) > 1 {
		this.container =
			slice(this.container, 0, len(this.container) - 1)
	}
}

fn (this: ^Gui) hover(r: rect::Rect): bool {
	return coll::vf2ToRect(input::getMousePos(), r)
}

//~~fn Gui.eval
// Runs the evaluation phase on `layout`.
fn (this: ^Gui) eval*(layout: LayoutFn) {
//~~
	if input::isJustPressed(input::Key.mouse1) { this.m1Pressed = true }
	if input::isJustReleased(input::Key.mouse1) { this.m1Pressed = false }
	if input::isJustPressed(input::Key.mouse2) { this.m2Pressed = true }
	if input::isJustReleased(input::Key.mouse2) { this.m2Pressed = false }
	if input::isJustPressed(input::Key.mouse3) { this.m3Pressed = true }
	if input::isJustReleased(input::Key.mouse3) { this.m3Pressed = false }

	this.idx = 0
	this.isEval = true
	layout(this)

	if this.hover(this.container[0].getDims()) {
		input::clear(input::Key.mouse1)
		input::clear(input::Key.mouse2)
		input::clear(input::Key.mouse3)
	}
}

//~~fn Gui.draw
// Runs the draw phase on `layout`.
fn (this: ^Gui) draw*(layout: LayoutFn) {
//~~
	this.idx = 0
	this.isEval = false
	layout(this)
}

//~~enum BoxGrow
// The different types of "growing" the box can do.
type BoxGrow* = enum {
	dimension
	subdiv
	span
	pxSpan
}
//~~

//~~enum BoxDirection
// Direction in which the box will grow.
type BoxDir* = enum {
	down
	right
	up
	left
}
//~~

//~~struct BoxConfig
// Configuration of the `Box` container.
type BoxConfig* = struct {
	// dimension to grow by if `BoxGrowDimension` is used
	dimension: th::fu
	// number of subdivisions if `BoxGrowSubdivisions` is used
	subdivisions: uint
	// the grow type
	growType: BoxGrow
	// the grow direction
	dir: BoxDir
	// Specifies the values used with BoxGrowSpan nad BoxGrowPxSpan.
	// If BoxGrowSpan is used, 1 equals the size of the box divided by the sum
	// of all spans.
	// If BoxGrowPxSpan is used, 1 equals one pixel.
	span: []th::fu
	// rect passed to the current container
	rect: rect::Rect
	// padding inserted after each element
	padding: th::fu
}
//~~

//~~struct Box
// `Box` is the main layout.  It puts the elements next to each other,
// according to the config.
//
// If the dimensions of the rect passed to `pushRect` are non zero, they will
// be kept. Position is always forced.
type Box* = struct {
	grow: th::fu
	spanCursor: int
	dm: rect::Rect
	cfg: BoxConfig
}
//~~

fn (this: ^Box) getGrow(): th::fu {
	switch this.cfg.growType {
	// These values are constant and can therefore be only calculated once.
	case BoxGrow.dimension:
		return this.grow
	case BoxGrow.subdiv:
		return this.grow
	case BoxGrow.span:
		// We store the amount of pixels per a span in the grow array.
		sp := this.cfg.span[this.spanCursor]
		this.spanCursor = (this.spanCursor + 1) % len(this.cfg.span)
		return sp * this.grow
	case BoxGrow.pxSpan:
		sp := this.cfg.span[this.spanCursor]
		this.spanCursor = (this.spanCursor + 1) % len(this.cfg.span)
		return sp
	}

	return 0
}

fn (this: ^Box) pushRect(r: rect::Rect): rect::Rect {
	switch this.cfg.dir {
	case BoxDir.down:
		r.x = this.dm.x
		r.y = this.dm.y

		if r.h == 0 {
			r.h = this.getGrow()
		}

		if r.w == 0 {
			r.w = this.dm.w
		}

		this.dm.y += r.h + this.cfg.padding
	case BoxDir.right:
		r.x = this.dm.x
		r.y = this.dm.y

		if r.h == 0 {
			r.h = this.dm.h
		}

		if r.w == 0 {
			r.w = this.getGrow()
		}

		this.dm.x += r.w + this.cfg.padding
	case BoxDir.up:
		if r.h == 0 {
			r.h = this.getGrow()
		}

		if r.w == 0 {
			r.w = this.dm.w
		}

		this.dm.h -= r.h + this.cfg.padding
		r.x = this.dm.x
		r.y = this.dm.y + this.dm.h
	case BoxDir.left:
		if r.h == 0 {
			r.h = this.dm.h
		}

		if r.w == 0 {
			r.w = this.getGrow()
		}

		this.dm.w -= r.w + this.cfg.padding
		r.x = this.dm.x + this.dm.w
		r.y = this.dm.y
	}

	return r
}

fn (this: ^Box) getDims(): rect::Rect {
	return this.dm
}

//~~fn Gui.box
// Adds the `Box` container to the gui.
fn (gui: ^Gui) box*(cfg: BoxConfig = {
	dimension: 30,
	growType: BoxGrow.dimension,
	dir: BoxDir.down }) {
//~~

	b := Box{}
	b.dm = gui.pushRect(cfg.rect)
	b.cfg = cfg

	dm := b.dm.h
	if cfg.dir == BoxDir.right || cfg.dir == BoxDir.left {
		dm = b.dm.w
	}
	dm += b.cfg.padding

	switch cfg.growType {
	case BoxGrow.dimension:
		b.grow = cfg.dimension
	case BoxGrow.subdiv:
		if cfg.subdivisions == 0 {
			th::__error("Invalid subdivision count")
		}

		b.grow = dm / cfg.subdivisions
	case BoxGrow.span:
		s := th::fu(0)
		for _,v in b.cfg.span {
			s += v
		}

		b.grow = dm / s
	}

	if !gui.isEval {
		gui.getStyle().containerBox.draw(b.dm)
	}

	gui.pushContainer(b)
}

//~~struct StackConfig
// Configuration for the `Stack` container.
type StackConfig* = struct {
	rect: rect::Rect
	padding: th::fu
}
//~~

//~~struct Stack
// The stack container puts elements on top of each other.
// If a property of the rect passed to `pushRect` is zero, it will be changed
// to an equivalent property of the containers' dimensions (minus the padding),
// else it will stay the same.  This means stack can be used either to put
// multiple elements/containers on top of each other, or for absolutely
// positioned elements.
type Stack* = struct {
	dm: rect::Rect
	cfg: StackConfig
}
//~~

fn (this: ^Stack) pushRect(r: rect::Rect): rect::Rect {
	r.x += this.dm.x + this.cfg.padding
	r.y += this.dm.y + this.cfg.padding
	if r.w == 0 { r.w = this.dm.w - 2*this.cfg.padding }
	if r.h == 0 { r.h = this.dm.h - 2*this.cfg.padding }

	return r
}

fn (this: ^Stack) getDims(): rect::Rect {
	return this.dm
}

//~~fn Gui.stack
// Adds the `Stack` container to the gui.
fn (gui: ^Gui) stack*(cfg: StackConfig = {}) {
//~~
	gui.pushContainer(Stack{
		dm: gui.pushRect(cfg.rect),
		cfg: cfg })

	if !gui.isEval {
		gui.getStyle().containerBox.draw(gui.getContainer().getDims())
	}
}

//~~struct ButtonConfig
// Configuration for the button.
type ButtonConfig* = struct {
	rect: rect::Rect
}
//~~

//~~fn Gui.button
// Adds a button to the gui.  The button acts like a `Stack` container, but it
// is drawn using the pos/nexBox styles and handles clicks. If the button is
// pressed and the gui is in the eval phase, the return value will be true.
fn (gui: ^Gui) button*(cfg: ButtonConfig = {}): bool {
//~~
	gui.stack(StackConfig{ rect: cfg.rect })
	r := gui.getContainer().getDims()

	if gui.isEval {
		if gui.hover(r) && input::isJustReleased(input::Key.mouse1) {
			return true
		}
		return false
	} else {
		if gui.hover(r) && gui.m1Pressed {
			gui.getStyle().negBox.draw(r)
		} else {
			gui.getStyle().posBox.draw(r)
		}
	}

	return false
}

//~~struct ScrollAreaConfig
// Configuration for the scroll area.
type ScrollAreaConfig* = struct {
	rect: rect::Rect
	// scroll speed. Default is 1
	speed: real32
	// if true, scrolling will be horizontal
	horizontal: bool
	// if not zero, render a scroll bar with the given width/height
	scrollBarSize: real32
}
//~~

//~~struct ScrollArea
// Scroll area is a container which allows the user to scroll. It acts as a
// stack container, but all the elements are shifted by the scroll.
type ScrollArea* = struct {
	dm: rect::Rect
	cfg: ScrollAreaConfig
	scroll: ^real32
	maxScroll: real32
}
//~~

fn (this: ^ScrollArea) pushRect(r: rect::Rect): rect::Rect {
	if r.x == 0 { r.x = this.dm.x }
	if r.y == 0 { r.y = this.dm.y }
	if this.cfg.horizontal {
		if r.w == 0 { r.w = this.maxScroll }
		if r.h == 0 { r.h = this.dm.h - this.cfg.scrollBarSize }
		return { r.x - this.scroll^, r.y, r.w, r.h }
	}

	if r.w == 0 { r.w = this.dm.w - this.cfg.scrollBarSize }
	if r.h == 0 { r.h = this.maxScroll }
	return { r.x, r.y - this.scroll^, r.w, r.h }
}

fn (this: ^ScrollArea) getDims(): rect::Rect {
	return this.dm
}

//~~fn Gui.scrollArea
// Pushes a scroll area. `scroll` is both input and output value. Both `scroll`
// and `maxScroll` are in pixels.
fn (gui: ^Gui) scrollArea*(scroll: ^real32, maxScroll: real32, cfg: ScrollAreaConfig = {}) {
//~~
	if cfg.speed == 0 {
		cfg.speed = 1
	}

	this := ScrollArea{
		dm: gui.pushRect(cfg.rect),
		cfg: cfg,
		scroll: scroll }
	gui.pushContainer(this)

	dm := this.dm.h
	if this.cfg.horizontal {
		dm = this.dm.w
	}

	if maxScroll < dm {
		scroll ^= 0
		return
	}

	if this.cfg.scrollBarSize > 0 {
		barDm := rect::Rect{}
		if this.cfg.horizontal {
			barDm.h = this.cfg.scrollBarSize
			barDm.w = this.dm.w / maxScroll * this.dm.w
			barDm.x = this.dm.x + (scroll^ / maxScroll) * this.dm.w
			barDm.y = this.dm.getEnd().y - barDm.h
		} else {
			barDm.h = this.dm.h / maxScroll * this.dm.h
			barDm.w = this.cfg.scrollBarSize
			barDm.x = this.dm.getEnd().x - barDm.w
			barDm.y = this.dm.y + (scroll^ / maxScroll) * this.dm.h
		}

		if gui.isEval && gui.hover(barDm) && gui.m1Pressed {
			if this.cfg.horizontal {
				scroll ^+= input::getMouseDelta().x
			} else {
				scroll ^+= input::getMouseDelta().y
			}
		}

		if !gui.isEval {
			if gui.hover(barDm) && gui.m1Pressed {
				gui.getStyle().negBox.draw(barDm)
			} else {
				gui.getStyle().posBox.draw(barDm)
			}
		}
	}

	if gui.isEval && gui.hover(this.dm) {
		v := input::getMouseScroll().y
		if this.cfg.horizontal {
			v = input::getMouseScroll().x
		}

		scroll ^= scroll^ - v*th::delta*this.cfg.speed
		if scroll^ < 0 { scroll^ = 0 }
		if maxScroll > dm && scroll^ >= maxScroll - dm { scroll^ = maxScroll - dm }
		if maxScroll < dm && scroll^ >= maxScroll { scroll^ = maxScroll }
	}
}

//~~struct LabelConfig
type LabelConfig* = struct {
	// centers the label along the X axis, enables `stretchX`
	centerX: bool
	// centers the label along the Y axis, enables `stretchY`
	centerY: bool
	// if false, the rect passed to `pushRect` will have the width of
	// the text, else it will be 0
	stretchX: bool
	// if false, the rect passed to `pushRect` will have the height of
	// the text, else it will be 0
	stretchY: bool
	// forces the rectangle the label will use
	rect: rect::Rect
}
//~~

//~~fn Gui.label
// Draws a label using the current font style.
fn (gui: ^Gui) label*(text: str, cfg: LabelConfig = {
//~~
	stretchX: true,
	stretchY: true }) {

	if cfg.centerX { cfg.stretchX = true }
	if cfg.centerY { cfg.stretchY = true }

	r := cfg.rect
	style := gui.getStyle()
	txtSize := style.ft.measure(text).mulf(style.ftScale)
	if r.w == 0 { r.w = txtSize.x }
	if r.h == 0 { r.h = txtSize.y }

	if cfg.stretchX { r.w = 0 }
	if cfg.stretchY { r.h = 0 }
	r = gui.pushRect(r)

	if gui.isEval { return }

	x := r.x
	y := r.y
	if cfg.centerX {
		x += (r.w-txtSize.x)/2.0
	}
	if cfg.centerY {
		y += (r.h-txtSize.y)/2.0
	}

	style.ft.draw(text, {x, y},
		style.ftColor, style.ftScale)
}

//~~fn Gui.qbutton
// Adds a button with a label to gui.
fn (gui: ^Gui) qbutton*(text: str, cfg: ButtonConfig = {}): bool {
//~~
	pressed := gui.button(cfg)
	gui.label(text, LabelConfig{centerX: true, centerY: true})
	gui.popContainer()
	return pressed;
}

//~~struct TextBoxConfig
type TextBoxConfig* = struct {
	// force the rect of the text box
	rect: rect::Rect
}
//~~

//~~struct TextBox
type TextBox* = struct {
	// index of the cursor
	cursor: int
	// contains other unexported rules...
//~~
	buffer: []utf8::Rune
}

//~~fn TextBox.clear
// Clears the textbox
fn (this: ^TextBox) clear*() {
//~~
	this.buffer = {}
	this.cursor = 0
}

//~~fn TextBox.getBuf()
// Get the content of the textbox.
fn (this: ^TextBox) getBuf*(): str {
//~~
	return utf8::encode(this.buffer)
}

//~~fn TextBox.setBuf()
// Get the content of the textbox.
fn (this: ^TextBox) setBuf*(s: str) {
//~~
	this.buffer = utf8::decode(s)
	this.cursor = len(this.buffer)
}

//~~fn Gui.textBox
// Adds a single line textbox to the gui.
// TODO:
// * right-to-left unicode is not supported.
// * no selection
// * multiline
// * copy paste (now implemented but in a limited way due to the lack of selection)
// * common input shortcuts
//   - ctrl+delete / ctrl+backspace (delete word)
fn (gui: ^Gui) textBox*(tb: ^TextBox, cfg: TextBoxConfig = {}) {
//~~
	gui.idx++

	r := gui.pushRect(cfg.rect)

	hover := gui.hover(r)

	if gui.isEval {
		if input::isJustPressed(input::Key.mouse1) && hover {
			gui.selection = gui.idx
		}

		if input::isJustPressed(input::Key.mouse1) && !hover &&
			gui.selection == gui.idx {
				gui.selection = 0
		}

		if input::isJustPressed(input::Key.escape) && gui.selection == gui.idx {
			gui.selection = 0
		}

		if gui.selection != gui.idx {
			return
		}

		if input::isPressedRepeat(input::Key.backspace) {

			if tb.cursor > 0 {
				tb.buffer = append(slice(tb.buffer, 0, tb.cursor - 1), slice(tb.buffer, tb.cursor))
				tb.cursor--
			}
		}

		if input::isPressedRepeat(input::Key.delete) {

			if tb.cursor >= 0 && tb.cursor < len(tb.buffer) {
				tb.buffer = append(slice(tb.buffer, 0, tb.cursor), slice(tb.buffer, tb.cursor+1))
			}
		}

		if input::isPressedRepeat(input::Key.home) {
			tb.cursor = 0
		}

		if input::isPressedRepeat(input::Key.end) {
			tb.cursor = len(tb.buffer)
		}

		v := true

		if input::isPressed(input::Key.ctrl) && input::isJustPressedc('v') {
			toInsert := utf8::decode(window::getClipboard())

			tb.buffer = append(append(slice(tb.buffer, 0, tb.cursor), toInsert), slice(tb.buffer, tb.cursor))
			tb.cursor += len(toInsert)
			v = false
		}

		if input::isPressed(input::Key.ctrl) && input::isJustPressedc('c') {
			window::setClipboard(utf8::encode(tb.buffer))
			v = false
		}

		if input::isPressed(input::Key.ctrl) && input::isJustPressedc('u') {
			tb.clear()
			v = false
		}

		const isRuneSpace = fn (r: utf8::Rune): bool {
			return r == utf8::Rune(' ') || r == utf8::Rune('\t') || r == utf8::Rune('\n')
		}

		if input::isPressed(input::Key.ctrl) && input::isPressedRepeat(input::Key.left) {
			// skip spaces
			for tb.cursor > 0 && isRuneSpace(tb.buffer[tb.cursor-1]) {
				tb.cursor--
			}

			for tb.cursor > 0 && !isRuneSpace(tb.buffer[tb.cursor-1]) {
				tb.cursor--
			}
			v = false
		}

		if input::isPressed(input::Key.ctrl) && input::isPressedRepeat(input::Key.right) {
			// skip spaces
			for tb.cursor < len(tb.buffer) && isRuneSpace(tb.buffer[tb.cursor]) {
				tb.cursor++
			}

			for tb.cursor < len(tb.buffer) && !isRuneSpace(tb.buffer[tb.cursor]) {
				tb.cursor++
			}
			v = false
		}

		if input::isPressedRepeat(input::Key.left) && v {
			if tb.cursor > 0 { tb.cursor-- }
		}

		if input::isPressedRepeat(input::Key.right) && v {
			if tb.cursor < len(tb.buffer) { tb.cursor++ }
		}

		runes := utf8::decode(input::getStr())
		if len(runes) > 0 && v {
			tb.buffer = append(append(slice(tb.buffer, 0, tb.cursor), runes), slice(tb.buffer, tb.cursor))
			tb.cursor += len(runes)
		}

		return
	}

	style := gui.getStyle()

	style.negBox.draw(r)
	canvas::beginScissorRect(r)

	buf := utf8::encode(tb.buffer)
	dm := style.ft.measure(buf).mulf(style.ftScale)

	p := th::Vf2{}
	p.y = r.y + r.h/2 - dm.y/2
	c := th::Vf2{r.x, p.y}

	cdmx := style.ft.measure(utf8::encode(slice(tb.buffer, 0, tb.cursor))).x * style.ftScale
	if cdmx < r.w - 2 {
		p.x = r.x + 1
		c.x = p.x + cdmx
	} else {
		c.x = r.x + r.w - 1
		p.x = c.x - cdmx
	}

	aW := style.ft.measure("A").x * style.ftScale

	style.ft.draw(buf, p, style.ftColor, style.ftScale)
	if gui.selection == gui.idx {
		canvas::drawRect(style.ftColor, rect::mk(c.x, c.y, aW / 4, dm.y))
	}

	canvas::endScissor()
}

//~~struct ImageConfig
// Configuration for the images element. Behaves similarly to labels.
type ImageConfig* = struct {
	stretchX, stretchY: bool
	centerX, centerY: bool
	color: uint32
	scale: th::Vf2
	rect: rect::Rect
}
//~~

//~~fn Gui.image
// Draws an image.
fn (gui: ^Gui) image*(i: image::Image, cfg: ImageConfig = {
	stretchX: true,
	stretchY: true,
	color: th::white,
	scale: { 1, 1 } }) {
//~~

	if cfg.centerX { cfg.stretchX = true }
	if cfg.centerY { cfg.stretchY = true }

	r := cfg.rect
	dm := i.getDims().mul(cfg.scale)
	if r.w == 0 { r.w = dm.x }
	if r.h == 0 { r.h = dm.y }

	if cfg.stretchX { r.w = 0 }
	if cfg.stretchY { r.h = 0 }

	r = gui.pushRect(r)

	if gui.isEval { return }

	x := r.x
	y := r.y
	if cfg.centerX {
		x += (r.w - dm.x) / 2
	}

	if cfg.centerY {
		y += (r.h - dm.y) / 2
	}

	i.draw(th::Transform{
		p: { x, y },
		s: cfg.scale }, cfg.color)
}

//~~fn getDefaultStyle
// Returns the default tophat ui style.
fn getDefaultStyle*(): Style {
//~~
	return {
		ft: PixelFont{},
		ftScale: 1,
		ftColor: th::black,

		posBox: {
			img: placeholders::button,
			outer: { 0, 0, 5, 5 },
			inner: { 2, 2, 1, 1 },
			scale: 1,
			color: th::white },
		negBox: {
			img: placeholders::button,
			outer: { 5, 0, 5, 5 },
			inner: { 2, 2, 1, 1 },
			scale: 1,
			color: th::white },
		containerBox: {
			color: 0x888888ff } }
}

//~~fn mk
// Creates a GUI instance.
fn mk*(r: rect::Rect, s: Style): Gui {
//~~
	gui := Gui{}
	gui.pushStyle(s)
	gui.container = []Container{ Stack{ dm: r } }

	return gui
}
