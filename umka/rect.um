import (
	"th.um"
)

//~~struct Rect
// A set of points representing a rectangle.
type Rect* = struct {
	x, y, w, h: th::fu
}
//~~

//~~fn mk
fn mk*(x, y, w, h: th::fu): Rect {
//~~
	var r: Rect

	r.x = x
	r.y = y
	r.w = w
	r.h = h

	return r
}

//~~fn mk
// Creates a rect from two Vf2s - the position and the dimensions.
fn fromVf2*(p: th::Vf2, dm: th::Vf2): Rect {
//~~
	return mk(p.x, p.y, dm.x, dm.y)
}

//~~fn Rect.getPos
fn (r: ^Rect) getPos*(): th::Vf2 {
//~~
	return {r.x, r.y}
}

//~~fn Rect.getDims
fn (r: ^Rect) getDims*(): th::Vf2 {
//~~
	return {r.w, r.h}
}

//~~fn Rect.getEnd
// returns where the second point of the rectangle lies.
fn (r: ^Rect) getEnd*(): th::Vf2 {
//~~
	return {r.x+r.w, r.y+r.h}
}

fn umth_transform_rect(r: Rect, t: th::Transform): th::Quad
//~~fn Rect.transformed
// Transforms a rect into a quad.
// Order:
// 	1. scale
// 	2. rotation
// 	3. position
fn (r: ^Rect) transformed*(t: th::Transform): th::Quad {
//~~
	return umth_transform_rect(r^, t)
}

//~~fn Rect.shrink
// Shrink the rectangle by `p` pixels from all sides.
fn (r: ^Rect) shrink*(p: th::Vf2): Rect {
//~~
	return Rect{ r.x + p.x, r.y + p.y, r.w - 2*p.x, r.h - 2*p.y }
}

//~~fn Rect.shift
// Shift the rectangle by `p` pixels.
fn (r: ^Rect) shift*(p: th::Vf2): Rect {
//~~
	return Rect{ r.x + p.x, r.y + p.y, r.w, r.h }
}

//~~fn Rect.scale
// Multiply the dimensions by `p`
fn (r: ^Rect) scale*(p: th::Vf2): Rect {
//~~
	return Rect{ r.x, r.y, r.w * p.x, r.h * p.y }
}

//~~fn Rect.center
// Returns the position, which is the center of the rect.
fn (r: ^Rect) center*(): th::Vf2 {
//~~
	return r.getPos().add(r.getDims().divf(2))
}

//~~fn Rect.centerWithinRect
// Centers `child` with the rect `r`.
fn (r: ^Rect) centerWithinRect*(child: Rect): Rect {
//~~
	child.x = r.x + (r.w - child.w)/2
	child.y = r.y + (r.h - child.h)/2
	return child
}

