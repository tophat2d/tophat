
import (
	"atlas.um"
	"audio.um"
	"ent.um"
	"font.um"
	"image.um"
	"input.um"
	"rect.um"
	"std.um"
	"th.um"
	"window.um"
)

// constants for jumping mechanics
const (
	gravity = 0.0015
	jumpForce = -0.35
)

// The game has two states - menu and game.
const (
	StateMenu = 0
	StateGame
)

// The different frames for the bird
BirdAnimJump := th::Vf2{ 0, 0 }
BirdAnimFall := th::Vf2{ 1, 0 }

var (
	// atlas containing the bird textures
	birdAtlas: atlas::Atlas
	// the player entity
	bird: ent::Ent
	// motion of the bird
	motion: th::Vf2

	// this is the base for the pillars
	pillarPrefab: ent::Ent
	pillarImg: image::Image
	pillarImgOuter, pillarImgInner: rect::Rect
	// an array of the pillars
	pillars: []^ent::Ent

	// the image used for the background
	backgroundImg: image::Image

	// the image used as a background in the menu
	buttonImg: image::Image
	buttonImgOuter, buttonImgInner: rect::Rect

	// the current state (either StateMenu or StateGame)
	state: int

	// the frequency of the pillars in px
	pillarFreq: real32
	// the player's x position when a pillar was last spawner
	lastPillar: real32

	ft: font::Font

	jumpSound: audio::Sound
	dieSound: audio::Sound

	score: int
	highScore: int
)

fn rand(min, max: int): int {
	return trunc(std::rand()/real32(std::randMax) * (max - min) + min)
}

fn spawnPillar(x: real32) {
	// the size of the opening between the two pillars
	hole := rand(trunc(window::wp.y * 0.5), trunc(window::wp.y * 0.2))
	// how much offset the hole is from the middle
	offset := rand(
		trunc(window::wp.y * 0.05),
		trunc(window::wp.y * 0.95 - hole))

	// spawn the to pillar
	e1 := new(ent::Ent)
	e1 ^= pillarPrefab
	e1.t.p.x = x
	e1.t.p.y = -window::wp.y * 1.5 + offset

	// spawn the bottom pillar
	e2 := new(ent::Ent)
	e2 ^= pillarPrefab
	e2.c = th::cyan
	e2.t.p.x = x
	// it's position is the bottom of the top pillar + size of the hole
	e2.t.p.y = e1.t.p.y + window::wp.y + hole

	// append the pillars to the pillars array
	pillars = append(pillars, []^ent::Ent{ e1, e2 })
}

// Draws a background image, with parallax
fn drawBackground(i: image::Image, y: th::fu, speed: th::fu) {
	// calculate the x coordinate on the screen
	x := (-bird.t.p.x * speed) % window::wp.x

	// draw the images
	i.draw({
		p: { x, y },
		s: th::vf2f(1) })
	i.draw({
		p: { x + window::wp.x, y },
		s: th::vf2f(1) })
}

// Returns the current score
fn getScore(): int {
	return trunc(bird.t.p.x / 100)
}

// Used to end the game
fn die() {
	dieSound.play()
	score = getScore()
	if score > highScore {
		highScore = score
	}

	state = StateMenu
}

// Used to start the game
fn play() {
	state = StateGame
	pillars = []^ent::Ent{}
	lastPillar = -window::wp.x/2
	bird.t.p = { }
}

// A simple utility function to write the canvas text to the middle of the
// screen
fn drawCenteredText(t: str, y: th::fu, c: uint32, s: th::fu): th::fu {
	ft.draw(t, { (window::wp.x - ft.measure(t).x * s)/2, y }, c, s)
	return ft.measure(t).y * s
}

fn menu() {
	// check all the known keys for a press
	for i:=0; i <= int(input::Key.menu); i++ {
		if input::isJustPressed(input::Key(i)) {
			play()
		}
	}

	// Here the menu is drawn. First the height of the menu is detemined,
	// which is then used to center the menu. Then all the text is drawn.

	const c = th::black

	const titleS = 1
	const textS = 0.4

	height := ft.measure("FLAPPY").y * titleS +
		20 + ft.measure("0 : 0").y * textS + 20 +
		ft.measure("Press any key").y * textS
	width := ft.measure("FLAPPY").x * titleS

	const padding = 20
	buttonImg.drawNinepatch(buttonImgOuter, buttonImgInner, {
		(window::wp.x - width - padding*2) / 2,
		(window::wp.y - height - padding*2) / 2,
		width+padding*2,
		height+padding*2 })

	y := (window::wp.y - height) / 2

	y += drawCenteredText("FLAPPY", y, c, titleS)
	y += 20
	y += drawCenteredText(sprintf("%d : %d", score, highScore), y, c, textS)
	y += 20

	if (th::time / 400) % 2 == 0 { // make the text blink
		y += drawCenteredText("Press any key", y, c, textS)
	}
}

fn game() {
	// bird motion
	// every frame we add some constant gravity to the bird motion to
	// simulate falling
	motion.y += gravity * th::delta
	// limit the falling force
	if motion.y > jumpForce * -1 {
		motion.y = jumpForce * -1
	}

	// jumping means setting the y motion to the jumpForce
	if input::isJustPressedc(' ') || input::isJustPressed(input::Key.mouse1) {
		motion.y = jumpForce
		jumpSound.play()
	}

	// add the motion to the bird position. The motion is multiplied by
	// frame delta to make sure the movement is FPS independent. It is also
	// multiplied by a function of the score, which makes the game
	// gradually faster.
	bird.t.p = bird.t.p.
		add(motion.mulf(th::delta).mulf(getScore() * 0.008 + 1))

	// pillar despawning
	// if the first pillar is not visible, we can delete it
	if len(pillars) > 0 && pillars[0].t.p.x + pillars[0].r.w < -window::wp.x/4 {
		pillars = slice(pillars, 2)
	}

	// pillar spawning
	// if the px travelled from the last pillar is more than the pillar
	// frequency, we can spawn a pillar and set the lastPillar variable.
	if bird.t.p.x - lastPillar > pillarFreq {
		lastPillar = bird.t.p.x
		spawnPillar(bird.t.p.x + window::wp.x)
	}

	// collisions
	// getColl returns an array of all collisions. We are only interested
	// in whether the bird collided or not. That means the lenght of the
	// array can just be checked.
	if len(bird.getColl(pillars, 1)) > 0 {
		die()
	}

	// check whether the bird is inside the screen
	if bird.t.p.y > window::wp.y/2 || bird.t.p.y < -window::wp.y/2 {
		die()
	}

	// draw
	// This offsets all the coordinates.
	window::setViewportOffset(th::Vf2{
		-bird.t.p.x + window::wp.x/4,
		window::wp.y/2 }.mulf(-1))

	// set the bird texture
	if motion.y < 0 {
		birdAtlas.cropSource(BirdAnimJump)
	} else {
		birdAtlas.cropSource(BirdAnimFall)
	}

	// draw the bird with the default camera (we use viewport offset
	// instead cameras).
	bird.draw()

	// draw the pillars
	for i,p in pillars {
		// if the pillar index is odd, the pillar is on the top, so it
		// must be flipped
		pillarImg.drawNinepatch(pillarImgOuter, pillarImgInner,
			rect::fromVf2(p.t.p.add(p.r.getPos()), p.r.getDims()))
	}

	// reset the viewport offset as HUD stays in place
	window::setViewportOffset({ })

	// HUD
	ft.draw(sprintf("%v", getScore()), { 4, 4 }, th::black, 0.4)
}

fn init*() {
	// setup the window
	window::setup("flappy", 480, 640)

	// setup the x motion
	motion = { 0.2, 0 }

	// load the bird image
	birdImage, err := image::load("gfx/bird.png")
	std::exitif(err)
	// setup bird entity
	birdAtlas = atlas::mk(birdImage, { 2, 1 })
	// create the entity using the atlas's image
	bird = ent::mk(birdAtlas.i)
	// the collider is automatically set to the dimensions of the whole
	// image, but we need to set it to the dimensions of one atlas cell
	bird.r = rect::fromVf2({}, birdAtlas.cs)
	// This shrinks the collider a bit, since the bird doesn't fill the
	// entire image. It also makes the game a bit more forgiving.
	bird.r = bird.r.shrink(th::vf2f(8))

	// setup pillar prefab entity. We don't use any image for since
	// a nine-patch image is used to draw the pipes.
	pillarPrefab = ent::mk({})
	pillarPrefab.r = { 2, 0, 52, window::wp.y }
	pillarPrefab.c = th::red

	// setup the pillar nine-patch
	pillarImg, err = image::load("gfx/pipe.png")
	std::exitif(err)
	// the outer rectangle is the whole image
	pillarImgOuter = rect::fromVf2({}, pillarImg.getDims())
	// These coordinates are hardcoded.
	pillarImgInner = { 9, 32, 46, 1 }

	// load the background image
	backgroundImg, err = image::load("gfx/bg.png")
	std::exitif(err)

	// load and setup the button image
	buttonImg,err  = image::load("gfx/button.png")
	std::exitif(err)

	buttonImgOuter = rect::fromVf2({}, buttonImg.getDims())
	buttonImgInner = { 4, 4, 24, 24 }

	ft, err = font::load("ComicNeue-Regular.ttf", 64)
	std::exitif(err)

	jumpSound, err = audio::load("sfx/jump.wav")
	std::exitif(err)

	jumpSound.setVol(0.1)

	dieSound, err = audio::load("sfx/hitHurt.wav")
	std::exitif(err)

	dieSound.setVol(0.6)

	pillarFreq = 260
	lastPillar = -window::wp.x/2

	window::onFrame.register({
		// draw the parallax background
		backgroundImg.cropPx({ 0, 0 }, { 480, 300 })
		drawBackground(backgroundImg, 0, 0.25)
		backgroundImg.cropPx({ 0, 300 }, { 480, 600 })
		drawBackground(backgroundImg, 300, 0.5)

		// launch the correct function based on the current state
		switch state {
		case StateMenu:
			menu()
		case StateGame:
			game()
		}

		// the bottom part of the background is in the foreground
		backgroundImg.cropPx({ 0, 600 }, { 480, 640 })
		drawBackground(backgroundImg, 600, 1)
	})
}
