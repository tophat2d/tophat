
import (
	"th.um"
	"ent.um"
	"std.um"
	"rect.um"
	"atlas.um"
	"image.um"
	"input.um"
	"canvas.um"
	//"shader.um"
	"window.um"
	"tilemap.um"
	"../strings.um"

	"../global.um"
)

var (
	atl: atlas::Atlas
	tm*: tilemap::Tilemap
	spawn*: th::Vf2

	coinPreset: ent::Ent
	coins*: []^ent::Ent

	plantPreset: ent::Ent
	plants*: []^ent::Ent

	score*: int

	//lavaImg: image::Image
	//lavaShader: shader.Shader
	//lavaShaderOff: shader.Uniform

	end*: th::Vf2
	endImg: image::Image

	start*: int
)

var (
	bgColor: uint32 = 0x00ced1ff
)

fn setup*() {
	tms := strings::split(global::readall("tilemap.txt"), "\n")

	im, err := image::load("res/platformertiles.png")
	std::exitif(err)

	atl = atlas::mk(im, th::Vf2{8, 3})
	tm = tilemap::mk(len(tms[0]), len(tms), atl, 1)
	tm.collMask = make([]bool, 8 * 3)
	for i in tm.collMask {
		tm.collMask[i] = true
	}
	tm.scale = 0.5
	tm.pos = th::Vf2{ -8 * global::tileSize, -8 * global::tileSize }

	im, err = image::load("res/coin.png")
	std::exitif(err)
	coinPreset = ent::mk(im, th::Transform{ s: th::Vf2{ 1, 1 }, p: tm.pos})
	coinMid := coinPreset.i.getDims().div(th::Vf2{2, 2})
	coinPreset.t.p = coinPreset.t.p.add(coinMid)
	coinPreset.t.o = coinMid

	im, err = image::load("res/plant.png")
	std::exitif(err)
	plantPreset = ent::mk(im, th::Transform{ s: th::Vf2{ 1, 1 }, p: tm.pos, o: th::Vf2{ 8, 8 }})

	//lavaShader = shader.mkCanvas(global.readall("shaders/lava.vert"), global.readall("shaders/lava.frag"))
	//lavaShaderOff = lavaShader.getUniformLocation("off")

	endImg, err = image::load("res/flag.png")
	std::exitif(err)
	start = th::time
}

fn reset*() {
	tms := strings::split(global::readall("tilemap.txt"), "\n")
	coins = []^ent::Ent{}
	plants = []^ent::Ent{}

	for i:=0; i < len(tm.cells); i++ {
		tm.cells[i] = 0
	}

	for y:=0; y < len(tms); y++ {
		for x:=0; x < len(tms[y]); x++ {
			p := th::Vf2{ x * global::tileSize + tm.pos.x, y * global::tileSize + tm.pos.y }

			switch tms[y][x] {
			case '#':
				tm.edit(x, y, 1)
			case 'c':
				c := new(ent::Ent)
				c^ = coinPreset
				c.t.p = p
				coins = append(coins, c)
			case 'p':
				pl := new(ent::Ent)
				pl^ = plantPreset
				pl.t.p = p
				plants = append(plants, pl)
			case 's':
				spawn = p
			case 'e':
				end = p
			}
		}
	}

	cfg := make([]th::uu, 16)
	cfg[0] = 5
	cfg[tilemap::right | tilemap::bot] = 1
	cfg[tilemap::right] = 1
	cfg[tilemap::left | tilemap::right ] = 2
	cfg[tilemap::left | tilemap::right | tilemap::bot] = 2
	cfg[tilemap::left | tilemap::bot] = 3
	cfg[tilemap::left] = 3
	cfg[tilemap::bot] = 5
	cfg[tilemap::top | tilemap::right | tilemap::bot] = 9
	cfg[tilemap::top | tilemap::right | tilemap::bot | tilemap::left] = 10
	cfg[tilemap::top | tilemap::bot | tilemap::left] = 11
	cfg[tilemap::top | tilemap::bot] = 13
	cfg[tilemap::top | tilemap::right] = 17
	cfg[tilemap::top | tilemap::right | tilemap::left] = 17
	cfg[tilemap::right | tilemap::top] = 18
	cfg[tilemap::top] = 21

	tm.autotile(tm.cells, cfg, 1)

	score = 0
}

fn handle*() {
	if input::isJustPressed(input::Key.enter) {
		reset()
		start = th::time
	}
}

fn draw*() {
	canvas::drawRect(bgColor, rect::mk(0, 0, window::wp.x, window::wp.y))

	const s = 0.5
	i := atl.i
	atl.cropSource(atl.coords(20))

	wpoff := window::getViewportOffset()
	x1 := trunc(wpoff.x / global::tileSize) - 1
	y1 := trunc(wpoff.y / global::tileSize) - 1
	x2 := x1 + trunc(window::wp.x / global::tileSize) + 3
	y2 := y1 + trunc(window::wp.y / global::tileSize) + 3

	for x:=x1; x < x2; x++ {
		for y:=y1; y < y2; y++ {
			i.draw(th::Transform{
				p: th::Vf2{x, y}.mulf(global::tileSize),
				s: th::vf2f(s) })
		}
	}

	tm.draw({p: {0, 0}, s: {1, 1}})
	rot := th::time % 8000 / 8000.0 * 360
	for i:=0; i < len(coins); i++ {
		coins[i].t.r = rot
		coins[i].draw()
	}

	for i:=0; i < len(plants); i++ {
		plants[i].draw()
	}

	endImg.draw(th::Transform{
		p: end,
		s: th::Vf2{ 1, 1 }})
}
