import (
	"falling_piece.um"
	"field.um"
	"input.um"
	"presets.um"
	"global.um"
	"std.um"
	m_bag = "bag.um"
	"crazytext.um"
)

var (
	hasPlaced*: bool
	hasUsedStash*: bool
	combo: int = 1
	lock_stash: bool = false
	stash*: int = -1
	bag*: m_bag::Bag
	speed*: real
	places: int
	clears*: int
)

fn kind(): int {
	return bag.getCurrentPiece()
}

fn nextTetromino() {
	bag.nextPiece()
}

fn init*() {
	std::srand(std::time())
	bag = m_bag::init()
	falling_piece::init()
	falling_piece::reset(kind())
	speed = 1
	places = 0
	clears = 0
}

fn place() {
	places += 1

	tspin := falling_piece::isTspin
	falling_piece::place()
	streak := field::clearRows()
	clears += streak

	if ((clears/10) + 1) != speed {
		crazytext::putText("SPEED UP!", 3)
	}
	speed = (clears/10) + 1

	if tspin {
		global::playSound(&global::audioClearMega)
		switch streak {
			case 0:
				crazytext::putText(sprintf("T-SPIN EMPTY! x%d", combo), 4)
			case 1:
				crazytext::putText(sprintf("T-SPIN SINGLE! x%d", combo), 4)
			case 2:
				crazytext::putText(sprintf("T-SPIN DOUBLE! x%d", combo), 5)
			case 3:
				crazytext::putText(sprintf("T-SPIN TRIPLE! x%d", combo), 6)
		}
	} else {
		if streak == 4 {
			crazytext::putText(sprintf("TETRIS! x%d", combo), 6)
			global::playSound(&global::audioClearMega)
		} else if streak > 0 {
			global::playSound(&global::audioClear)
		}
	}

	global::score += presets::getScore(streak, tspin) * combo

	if streak == 4 || tspin {
		combo += 1
	} else if streak > 0 {
		combo = 1
	}


	nextTetromino()
	falling_piece::reset(kind())
	lock_stash = false
}

fn stashPiece() {
	if lock_stash {
		return
	}
	lock_stash = true
	if stash == -1 {
		stash = falling_piece::kind
		nextTetromino()
		falling_piece::reset(kind())
	} else {
		tmp := falling_piece::kind
		hasUsedStash = true
		falling_piece::reset(stash)
		stash = tmp
	}
}

fn update*() {
	hasPlaced = false
	hasUsedStash = false
	if field::lost {
		init()
		global::score = 0
		combo = 0
		crazytext::putText("YOU LOST! BAD LUCK.", 5.0, false)
		field::init()
		field::lost = false
	}
	if input::isJustPressed(input::Key.shift) {
		stashPiece()
	}
	if falling_piece::placeTimer > 0.5 || falling_piece::groundTouchTimer > 5 {
		place()
		hasPlaced = true
	}
}
