import (
	"th.um"
	"piece.um"
	"presets.um"
	"global.um"
	"input.um"
	"field.um"
	"latch.um"
)

var (
	x*: real = 0.0
	y*: real = 0.0
	groundTouchTimer*: real = 0.0
	placeTimer*: real = 0.0
	isTspin*: bool = false
	rotation*: int = 0
	kind*: int = 0

	leftBtnLatch: latch::Latch
	rightBtnLatch: latch::Latch
	downLatch: latch::Latch
)

fn reset*(_kind: int) {
	x = 4
	kind = _kind
	y = 0
	groundTouchTimer = 0
	placeTimer = 0
	rotation = 0
	isTspin = false
}

fn pieceValue*(rotation: int): piece::Piece {
	return presets::pieceValue(kind, rotation)
}

fn place*() {
	val := pieceValue(rotation)
	piece::project(val, trunc(x), trunc(y))
}

fn invalid(): bool {
	val := pieceValue(rotation)
	return !piece::canPut(val, trunc(x), trunc(y));
}

fn getKicks(from, to: int): [4]presets::Kick {
	clockwise := ((from+1)%4) == to
	if kind == 0 {
		if clockwise {
			return presets::ClockwiseI[from]
		} else {
			return presets::CounterclockwiseI[from]
		}
	}
	if clockwise {
		return presets::ClockwiseNI[from]
	}
	return presets::CounterclockwiseNI[from]
}

fn checkTSpinCorners() {
	isTspin = false
	if kind == presets::pieceTypeT {
		corners := 0
		ix, iy := trunc(x), trunc(y)

		if !field::isFree(ix, iy) { corners += 1 }
		if !field::isFree(ix+2, iy) { corners += 1 }
		if !field::isFree(ix, iy+2) { corners += 1 }
		if !field::isFree(ix+2, iy+2) { corners += 1 }
		if corners >= 3 {
			isTspin = true
		}
	}
}

fn runKickTable(table: [4]presets::Kick): bool {
	if !invalid() {
		return true
	}
	original_x := x
	original_y := y
	for i, kick in table {
		x += real(kick.x)
		y += real(-kick.y)
		if !invalid() {
			if kind == presets::pieceTypeT {
				isTspin = true
			}
			return true
		}
		x = original_x
		y = original_y
	}
	return false
}

fn rotate180() {
	from := rotation
	to := (rotation + 2)%4
	rotation = to
	if invalid() {
		rotation = from
	}
}

fn rotateClockwise() {
	from := rotation
	to := (rotation + 1)%4
	rotation = to
	checkTSpinCorners()
	if !runKickTable(getKicks(from, to)) {
		rotation = from
	}
}

fn rotateCounterclockwise() {
	from := rotation
	to := rotation - 1
	if to < 0 {
		to = 3
	}

	rotation = to
	checkTSpinCorners()
	if !runKickTable(getKicks(from, to)) {
		rotation = from
	}
}

fn push*() {
	for !invalid() {
		y += 1
	}
	placeTimer = 0.6
	y -= 1
}

fn movePiece(dx, dy: real) {
	{
		prev := x
		x += dx;
		if invalid() {
			x = prev
		} else {
			placeTimer = 0
		}
	}

	{
		prev := y
		y += dy;
		if invalid() {
			y = prev
		}
	}
}

fn init*() {
	x = 0.0
	y = 0.0
	placeTimer = 0.0
	isTspin = false
	rotation = 0
	kind = 0

  leftBtnLatch = latch::initLatch()
  rightBtnLatch = latch::initLatch()
  downLatch = latch::initLatch()
}

fn update*(speed: real) {
	prev := y
	y += 0.001*th::delta*speed;
	if invalid() {
		y = prev
		placeTimer += th::delta/1000.0
		groundTouchTimer += th::delta/1000.0
	} else {
		groundTouchTimer = 0
		placeTimer = 0
	}


	if (leftBtnLatch.pass(input::isPressed(.left))) {
		movePiece(-1, 0)
	}

	if (rightBtnLatch.pass(input::isPressed(.right))) {
		movePiece(1, 0)
	}

	if (downLatch.pass(input::isPressed(.down))) {
		prev = y
		y += 1
		if invalid() {
			placeTimer += 0.5
			y = prev
		}
	}

	if (input::isJustPressedc('X') || input::isJustPressed(input::Key.up)) {
		global::playSound(&global::audioRotate)
		placeTimer = 0
		rotateClockwise()
	} else if (input::isJustPressedc('Z')) {
		global::playSound(&global::audioRotate)
		placeTimer = 0
		rotateCounterclockwise()
	} else if (input::isJustPressedc('C')) {
		global::playSound(&global::audioRotate)
		placeTimer = 0
		rotate180()
	}
	if (input::isJustPressedc(' ')) {
		global::playSound(&global::audioPush)
		push()
	}
}


