import (
	"std.um"
)

fn peekstr(f: std::File, next: int): str {
	tr := ""
	var c: char
	for i:=0; i < next; i++ {
		fscanf(f, "%c", &c)
		tr += str(c)
	}

	return tr
}

fn peekn(f: std::File, next: int): int {
	tr := 0
	var c: char
	for i:=0; i < next; i++ {
		fscanf(f, "%c", &c)
		ic := int(c)
		if ic < 0 { ic += 256 }
		tr += ic << (8 * (next - i - 1))
	}

	return tr
}

fn loadFF*(path: str): ([]uint32, int, int, int) {
	f, err := std::fopen(path, "r")
	std::exitif(err)
	if f == null { return []uint32{}, -1, -1, 1 }
	var w, h: int
	var tr: []uint32

	if val := peekstr(f, 8); val != "farbfeld" { return []uint32{}, -1, -1, 2 }
	w = peekn(f, 4)
	h = peekn(f, 4)
	tr = make([]uint32, w * h)
	var c: char
	for j:=0; j < w * h; j++ {
		for h:=0; h < 4; h++ {
			fscanf(f, "%c", &c)
			fscanf(f, "%c", &c)
			ic := int(c)
			if ic < 0 { ic += 256 }
			tr[j] += ic << (8 * (3 - h))
		}
	}

	std::fclose(f)
	return tr, w, h, 0
}

fn chcnt(chars: str, c: str): bool {
	for i in chars {
		if c == chars[i] {
			return true
		}
	}

	return false
}

fn strtoc(inp: str): str {
	out := ""
	out += "\""

	for i, c in inp {
		if chcnt("\"\n\t'\\", str(c)) {
			out += "\\"
		}

		if c == '\t' {
			out += "t"
		} else if c == '\n' {
			out += "n"
			out += "\"\n\""
		} else if c == '\r' {
		} else {
			out += str(c)
		}
	}

	out += "\""
	return out
}

fn main() {
	mode := std::argv(1)

	// embeds contents of a file as a string. TODO just as bytes
	if mode == "em" {
		printf("const char *%s[] = {\n", std::argv(2))

		for i:=3; i < std::argc(); i++ {
			f, err := std::fopen(std::argv(i), "rb")
			std::exitif(err)
			data, err := std::freadall(f)
			std::exitif(err)
			printf("%s\n", strtoc(str(data))+",")
			std::fclose(f)
		}

		printf("};\n")
	// creates a string array with args as values
	} else if mode == "argarr" {
		printf("const char *%s[] = { ", std::argv(2))
		for i:=3; i < std::argc(); i++ {
			printf("\"%s\", ", std::argv(i))
		}

		printf(" };\n")
		printf("int %s_count = %d;\n", std::argv(2), std::argc() - 3)
	} else if mode == "placeholders" {
		ws := []int{}
		hs := []int{}

		for i:=2; i < std::argc(); i++ {
			fname := std::argv(i)


			data, w, h, err := loadFF(fname)
			if err > 0 { continue }
			ws = append(ws, w)
			hs = append(hs, h)

			datas := "{"
			for i in data {
				datas += sprintf("0x%x", data[i])
				if i < len(data) - 1 { datas += ", " }
			}
			datas += "}"
			printf("static uint32_t th_em_placeholder_data_%d[] = %s;\n", i, datas)
		}

		printf("th_em_placeholder th_em_placeholders[] = {\n")
		for i:=2; i < std::argc(); i++ {
			printf("{ th_em_placeholder_data_%d, { .w = %d, .h = %d } },\n",
				i, ws[i - 2], hs[i - 2])
		}
		printf("};\n")
	}
}
